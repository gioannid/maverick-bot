package johnidis.maverick;import java.security.SecureRandom;import johnidis.maverick.modelling.*;import johnidis.maverick.modelling.adapters.*;import johnidis.maverick.modelling.data.MLData;import johnidis.maverick.modelling.modellers.HistogramModeller;import johnidis.maverick.modelling.modellers.Modeller;import johnidis.maverick.modelling.modellers.StatefulModeller;import johnidis.maverick.modelling.models.BNModel;import johnidis.maverick.modelling.models.HistogramActionModel;import johnidis.maverick.modelling.models.Model;import johnidis.maverick.modelling.player.BNPlayerModeller;import johnidis.maverick.modelling.player.PlayerModeller;import johnidis.utils.collection.LevenshteinMap;public class Holdem {		public static final Model<GameAdapter,MLData> BEHAVIORAL_MODEL_ACTION 					= BNModel.Action;	public static final Model<GameAdapter,MLData> BEHAVIORAL_MODEL_HAND						= BNModel.Hand;	// stages of game	public final static int UNKNOWN_STAGE 					= -1;	public final static int PREFLOP 						= 0;	public final static int FLOP 							= 1;	public final static int TURN 							= 2;	public final static int RIVER 							= 3;	public final static int SHOWDOWN 						= 4;		// misc	public final static int MAX_PLAYERS 					= 10;	public static final int	HISTOGRAM_SLICES				= 16;		public static final SecureRandom RNG = new SecureRandom();	public static Modeller<PlayerModeller<GameAdapter,Character,MLData>,GameAdapter,MLData> modeller =			new StatefulModeller(BNModel.class, BNPlayerModeller.class);	public static HistogramModeller<MLData> histogramActions = 			new HistogramModeller<>(HistogramActionModel.class, modeller, BEHAVIORAL_MODEL_ACTION);/*	public static HistogramModeller<MLData> histogramHands = 			new HistogramModeller<>(HistogramSymbolicHandModel.class, modeller, BEHAVIORAL_MODEL_HAND);*/	private static final int MAX_MUCKED_HANDS_IN_RAM		= 100;			private static int holdemId = 0;		public GameAdapter gameSnapshot;//	public GameAdapter handGameSnapshot;	public PaObserver gameObserver = null;	public final int id;	private GameCache<LevenshteinMap<GameAdapter>> muckedHands = new GameCache<>(MAX_MUCKED_HANDS_IN_RAM);	private final String description;	private final String lineId;	private boolean newLine = true;		static public GameAdapter newActionAdapter(boolean report) {		return new BNGameAdapter(report);	}		static public GameAdapter newHandAdapter(boolean report) {		return new BNGameAdapter(report);	}		static public GameAdapter newActionAdapter(GameAdapter other, Object game) {		return new BNGameAdapter(other, game);	}		static public GameAdapter newHandAdapter(GameAdapter other, Object game) {		return new BNGameAdapter(other, game);	}			public Holdem () {		id = newId();		description = String.valueOf(id);		lineId = description + "/ ";	}		public Holdem (String desc) {		id = newId();		description = desc;		lineId = String.valueOf(id) + "/ ";	}			private int newId () {		synchronized (RNG) {			holdemId++;		}		return holdemId;	}		public void print(String str) {		if (newLine)			System.out.print(lineId + str);		else			System.out.print(str);		newLine = false;	}		public void println(String str) {		System.out.println(lineId + str);		newLine = true;	}		public void println() {		System.out.println();		newLine = true;	}		public void err(String str) {		System.err.println(lineId + str);	}		public void cacheMuckedHand (long handnumber, String player, GameAdapter adapter) {		synchronized (muckedHands) {			LevenshteinMap<GameAdapter> muckedPlayers = muckedHands.get(handnumber);			if (muckedPlayers == null) {				muckedPlayers = new LevenshteinMap<GameAdapter>();				muckedHands.put(handnumber, muckedPlayers);			}			muckedPlayers.put(player, adapter);		}	}		public GameAdapter getCachedMuckedHand (long handnumber, String player, boolean remove) {		synchronized (muckedHands) {			LevenshteinMap<GameAdapter> muckedPlayers = muckedHands.get(handnumber);			if (muckedPlayers == null)				return null;			GameAdapter adapter = muckedPlayers.get(player);			if ((remove) && (adapter != null)) {				muckedPlayers.remove(player);				if (muckedPlayers.size() == 0)					muckedHands.remove(muckedPlayers);			}			return adapter;		}	}		@Override	public String toString() {		return description;	}	}