/***************************************************************************   Copyright (c) 2000:         University of Alberta,         Deptartment of Computing Science         Computer Poker Research Group         See "Liscence.txt"***************************************************************************/package poker;import poker.maverick.Iface;/** * Useful Holdem Constants * * <P>Source Code: <A HREF="http://www.cs.ualberta.ca/~davidson/poker/src/poker/Holdem.java">Holdem.java</A><P> * * @author  Aaron Davidson * @version 1.0.0 */public class Holdem {	// stages of game	public final static int PREFLOP = 0;	public final static int FLOP = 1;	public final static int TURN = 2;	public final static int RIVER = 3;	public final static int SHOWDOWN = 4;		// misc	public final static int MAX_PLAYERS = 15;	public final static int MAX_RAISES  = 4;		public final static int NO_SUCH_ACTION = -1;		// actions/*	public final static int BLIND = 3;	public final static int SMALL_BLIND = 3;	public final static int BIG_BLIND = 4;	public final static int FOLD = 0;	public final static int CHECK = 0;	public final static int CALL = 1;	public final static int BET = 2;	public final static int RAISE = 2;*/	public final static int NONE 						= 1;	public final static int FOLD 						= 2;	public final static int CHECK						= 4;	public final static int CALL						= 8;	public final static int BET 						= 16;	public final static int RAISE 						= 32;	public final static int SMALL_BLIND 				= 64;	public final static int BIG_BLIND 					= 128;		private static final Holdem NO_ACTION = new Holdem (NONE, 0);	private static final Holdem FOLD_ACTION	= new Holdem (FOLD, 0);	private static final Holdem CHECK_ACTION = new Holdem (CHECK, 0);	private static final Holdem CHECK_OR_FOLD_ACTION = new Holdem (CHECK | FOLD, 0);		private int action = 0;	private int amount = NO_SUCH_ACTION;		public static Holdem noAction () {		return NO_ACTION;	}	public static Holdem foldAction () {		return FOLD_ACTION;	}	public static Holdem checkAction () {		return CHECK_ACTION;	}	public static Holdem checkOrFoldAction () {		return CHECK_OR_FOLD_ACTION;	}		public static Holdem callAction (int am) {		return new Holdem (CALL, am);	}	public static Holdem betAction (int am) {		return new Holdem (BET, am);	}		public static Holdem raiseAction (int am) {		return new Holdem (RAISE, am);	}		public static Holdem betOrRaiseAction (int am) {		return new Holdem (BET | RAISE, am);	}		public static Holdem smallBlindAction (int am) {		return new Holdem (SMALL_BLIND, am);	}	public static Holdem bigBlindAction (int am) {		return new Holdem (BIG_BLIND, am);	}			@SuppressWarnings("unused")	private Holdem () {		// parameterless construction not permitted	}		public Holdem (int act, int am) {		action = act;		amount = am;	}	public boolean isNone() {		return ((action & NONE) == NONE);	}		public boolean isFold() {		return ((action & FOLD) == FOLD);	}		public boolean isCheck() {		return ((action & CHECK) == CHECK);	}		public int callAmount() {		if ((action & CALL) == CALL) {			return amount;		} else {			return NO_SUCH_ACTION;		}	}		public int betAmount() {		if ((action & BET) == BET) {			return amount;		} else {			return NO_SUCH_ACTION;		}	}		public int raiseAmount() {		if ((action & RAISE) == RAISE) {			return amount;		} else {			return NO_SUCH_ACTION;		}	}		public int betOrRaiseAmount() {		if (((action & BET) == BET) || ((action & RAISE) == RAISE)) {			return amount;		} else {			return NO_SUCH_ACTION;		}	}		public int smallBlindAmount() {		if ((action & SMALL_BLIND) == SMALL_BLIND) {			return amount;		} else {			return NO_SUCH_ACTION;		}	}		public int bigBlindAmount() {		if ((action & BIG_BLIND) == BIG_BLIND) {			return amount;		} else {			return NO_SUCH_ACTION;		}	}		public int blindAmount() {		if (((action & SMALL_BLIND) == SMALL_BLIND) || ((action & BIG_BLIND) == BIG_BLIND)) {			return amount;		} else {			return NO_SUCH_ACTION;		}	}		@Override	public String toString () {		if (betAmount () != NO_SUCH_ACTION) {			return Iface.MSG_BET + " " + amount;		} else if (raiseAmount () != NO_SUCH_ACTION) {			return Iface.RAISE + " " + amount;		} else if (smallBlindAmount () != NO_SUCH_ACTION) {			return Iface.SMALL_BLIND + " " + amount;		} else if (bigBlindAmount () != NO_SUCH_ACTION) {			return Iface.BIG_BLIND + " " + amount;		} else if (callAmount () != NO_SUCH_ACTION) {			return Iface.CALL + " " + amount;		} else if (isCheck ()) {			return Iface.CALL + " 0";		} else if (isFold ()) {			return Iface.FOLD;		} else if (isNone ()) {			return Iface.MSG_NO_ACTION;		} else {			return Iface.MSG_WARNING + " ACTION=" + action+ " AMOUNT=" + amount;		}	}		@Override	public boolean equals (Object h) {		if (h instanceof Holdem) {			return (((action & ((Holdem) h).action) > 0) && (amount == ((Holdem) h).amount));		} else {			return false;		}	}}