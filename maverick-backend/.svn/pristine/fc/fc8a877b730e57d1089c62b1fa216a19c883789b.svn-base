package poker.maverick;import java.io.*;import java.net.*;import poker.*;import poker.util.*;public class BotServer implements Runnable {    private static final String USAGE =	"usage: BotServer.class <port>";    private volatile boolean inGame = false;	/* game info */	private GameInfo gInfo; 	private Socket client;	private BufferedWriter out;	private int numPlayers = 0;	private int POS = 0;	private int bet_size = 0;	private int toAct, nextToAct;	private FellOmen_2 bot;		public BotServer(Socket s) {		bot = new FellOmen_2();		client = s;		try {			out = new BufferedWriter(new OutputStreamWriter(client.getOutputStream()));		} catch (IOException e) {			e.printStackTrace();		}	}		@Override	public void run() {		Hand h;		boolean needCards = false;		int amnt,i,who;    	String msg;    	try {			BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));			while (client != null) {				msg = in.readLine();				if (msg == null) {					msg = Iface.CMD_GOODBYE;				}				println("<<< "+msg);				String[] token = msg.split(" ");				token[0] = token[0].toUpperCase();				if (Iface.CMD_GOODBYE.equals(token[0])) {				// GOODBYE					println("GOODBYE");					if (client != null)						client.close(); 					client = null;					if (inGame)						quit();				} else if (Iface.CMD_CHATTER.equals(token[0])) {		// FROM whom text					try {						String text = msg.split(" ", 3)[2];						println(token[1] + " says: " + text);						doChatter(token[1], text);						send(Iface.MSG_NO_ACTION);					} catch (ArrayIndexOutOfBoundsException e) {						send(Iface.MSG_WARNING + " " + e);					}				} else if (Iface.PING.equals(token[0])) {				// PING					send (Iface.PONG);					println("[PING]");				} else if (Iface.CMD_START_NEW_GAME.equals(token[0])) {	// NEWGAME bigblind numseats button					try {												// myseat game# <name-i bankroll-i>...						gInfo = new GameInfo();						bet_size = Integer.valueOf(token[1]);						gInfo.setBetMultiplier(bet_size/2);						numPlayers = Integer.valueOf(token[2]);						int button = Integer.valueOf(token[3]);						POS = Integer.valueOf(token[4]);						long gID = Long.valueOf(token[5]);						for (i=0;i<numPlayers;i++) {															String name = token[6+i*2];							int bankroll = Integer.valueOf(token[7+i*2]);							gInfo.addPlayer(name,gInfo.LOG_DIR+name.toLowerCase()+".dat");							gInfo.getPlayerInfo(name).setBankRoll(bankroll);						}						gInfo.setButton(button);						gInfo.startNewGame(gID);						toAct = gInfo.getNumActivePlayers();						nextToAct = gInfo.getCurrentPlayerPosition();						printTable();						needCards = true;						send(Iface.MSG_NO_ACTION);					} catch (Exception e) {						gInfo.gameOver();						bot.gameOverEvent();						send(Iface.MSG_ERROR + " " + e);					}				} else if (Iface.CMD_HOLE_CARDS.equals(token[0])) {		// DEAL seat holecards					try {						int p = Integer.valueOf(token[1]);						String[] t = msg.split(" ", 3);						h = new Hand(t[2]);						gInfo.getPlayerInfo(p).revealHand(h.getCard(1), h.getCard(2));						println("     " + gInfo.getPlayerName(p) + ":  " + h.toString() );						if (p == POS && needCards) {							bot.newGame(gInfo, h.getCard(1), h.getCard(2), POS);							needCards = false;						}						send(Iface.MSG_NO_ACTION);					} catch (Exception e) {						gInfo.gameOver();						bot.gameOverEvent();						send(Iface.MSG_ERROR + " " + e);					}				} else if (Iface.CMD_FLOP.equals(token[0])) {			// FLOP communitycards					try {						h = new Hand(msg.split(" ", 2)[1]);						toAct = gInfo.getNumActivePlayers();													gInfo.flop(h.getCard(1),h.getCard(2),h.getCard(3));	  						bot.stageEvent();												gInfo.setCurrentPlayerPosition(gInfo.getButton());						selectNextToAct();						send(Iface.MSG_NO_ACTION);					} catch (ArrayIndexOutOfBoundsException e) {						gInfo.gameOver();						bot.gameOverEvent();						send(Iface.MSG_ERROR + " " + e);					}				} else if (Iface.CMD_TURN.equals(token[0])) {			// TURN communitycards					try {						h = new Hand(msg.split(" ", 2)[1]);						toAct = gInfo.getNumActivePlayers();													gInfo.turn(h.getCard(1));	  						bot.stageEvent();												gInfo.setCurrentPlayerPosition(gInfo.getButton());						selectNextToAct();						send(Iface.MSG_NO_ACTION);					} catch (ArrayIndexOutOfBoundsException e) {						gInfo.gameOver();						bot.gameOverEvent();						send(Iface.MSG_ERROR + " " + e);					}				} else if (Iface.CMD_RIVER.equals(token[0])) {			// RIVER communitycards					try {						h = new Hand(msg.split(" ", 2)[1]);						toAct = gInfo.getNumActivePlayers();													gInfo.river(h.getCard(1));	  						bot.stageEvent();												gInfo.setCurrentPlayerPosition(gInfo.getButton());						selectNextToAct();						send(Iface.MSG_NO_ACTION);					} catch (ArrayIndexOutOfBoundsException e) {						gInfo.gameOver();						bot.gameOverEvent();						send(Iface.MSG_ERROR + " " + e);					}				} else if (Iface.CMD_NEXT_TO_ACT.equals(token[0])) {	// ACTION? seat					try {						nextToAct = Integer.valueOf(token[1]);						if (nextToAct != gInfo.getCurrentPlayerPosition()) 								outOfSync (nextToAct, gInfo.getCurrentPlayerPosition());						act();					} catch (Exception e) {						send(Iface.MSG_WARNING + " " + e);					}				} else if (Iface.CMD_BLIND.equals(token[0])) {			// BLIND seat amount					try {						who = Integer.valueOf(token[1]);						if (who != nextToAct) 								outOfSync (who, nextToAct);						amnt = Integer.valueOf(token[2]);						if (amnt == bet_size) {							println("Big blind");							gInfo.bigBlind();							bot.actionEvent(who, Holdem.bigBlindAction(amnt));							} else {							println("Small blind");							gInfo.smallBlind();							bot.actionEvent(who, Holdem.smallBlindAction(amnt));							}													selectNextToAct();						send(Iface.MSG_NO_ACTION);					} catch (Exception e) {						send(Iface.MSG_WARNING + " " + e);					}				} else if (Iface.FOLD.equals(token[0])) {				// FOLD seat					try {						who = Integer.valueOf(token[1]);						if (who != nextToAct) 							outOfSync (who, nextToAct);						toAct--;						gInfo.fold();						bot.actionEvent(who, Holdem.foldAction());						selectNextToAct();						send(Iface.MSG_NO_ACTION);					} catch (Exception e) {						send(Iface.MSG_WARNING + " " + e);					}				} else if (Iface.CALL.equals(token[0])) {				// CALL seat amount					try {						who = Integer.valueOf(token[1]);						if (who != nextToAct) 							outOfSync (who, nextToAct);						amnt = Integer.valueOf(token[2]);						toAct--;						gInfo.call();						if (amnt == 0) {							bot.actionEvent(who, Holdem.checkAction());								} else {							bot.actionEvent(who, Holdem.callAction(amnt));						}													selectNextToAct();						send(Iface.MSG_NO_ACTION);					} catch (Exception e) {						send(Iface.MSG_WARNING + " " + e);					}				} else if (Iface.RAISE.equals(token[0])) {				// RAISE seat amount					try {						who = Integer.valueOf(token[1]);						if (who != nextToAct) 							outOfSync (who, nextToAct);						amnt = Integer.valueOf(token[2]);						toAct = gInfo.getNumActivePlayers()-1;						if (gInfo.raise()) {							bot.actionEvent(who, Holdem.betAction(amnt));												} else {							bot.actionEvent(who, Holdem.raiseAction(amnt));												}						selectNextToAct();						send(Iface.MSG_NO_ACTION);					} catch (Exception e) {						send(Iface.MSG_WARNING + " " + e);					}				} else if (Iface.CMD_WINNERS.equals(token[0])) {		// WINNER numseats <seat-i amount-i>...					try {						int numwin = Integer.valueOf(token[1]);						for (i=0;i<numwin;i++) {						 	who = Integer.valueOf(token[2+i*2]);							amnt = Integer.valueOf(token[3+i*2]);							gInfo.getPlayerInfo(who).win(amnt);						}					} catch (Exception e) {						println(e.toString());					}					gInfo.gameOver();					bot.gameOverEvent();					send(Iface.MSG_NO_ACTION);				} else {					String e = Iface.MSG_WARNING + " " + msg + "?"; 					send(e);				}							}		} catch (Exception e) {			e.printStackTrace();			if (client != null)				try {					send(Iface.MSG_ERROR + " " + e);					client.close();				} catch (IOException e1) {					;				} 			client = null;			if (inGame)				quit();		}   }  	private void selectNextToAct() {	 	gInfo.advanceCurrentPlayer();		nextToAct = gInfo.getCurrentPlayerPosition(); 	} 	 	private void act () {	 	if (gInfo.getCurrentPlayerPosition() == POS && toAct > 0) {			if (gInfo.getStage() == Holdem.PREFLOP) {				if (gInfo.getPot() <= gInfo.getBetSize()) {					send (Iface.MSG_NO_ACTION);					return;				}			}			Holdem a = bot.getAction();			send(a.toString());	 	} 	} 	   static final void println(String str) { 	 	System.out.println(str);   } 	 	void send (String str) {		try {			println(">>> "+str);			out.write(str + "\r\n");			out.flush();		} catch (IOException e) {			println(e.toString());		} 	} 	 	void outOfSync (int current, int supposed) { 		send(Iface.MSG_WARNING_OUT_OF_SYNC + " " + current + " INSTEAD OF " + supposed);		gInfo.setCurrentPlayerPosition(current); 	} 		void quit() {		inGame = false;		println("Service is now being stopped.");		if (client != null) {			send (Iface.MSG_GOODBYE);			try {				client.close();			} catch (IOException e) {				e.printStackTrace();			}		}		client = null;		}	void printTable() {		println("");		println("\n--- NEW GAME --- " + gInfo.getID() + " ---");		for (int i=0;i<gInfo.getNumPlayers();i++) 			println((i==gInfo.getButton() ? ("B> ") : (" > ")) + Reporter.pad(gInfo.getPlayerName(i), 14) + " " + gInfo.getPlayerInfo(i).getBankRoll() );		println("-----------------------");	}	void shutdown() {		println("Shutting down...");        if (inGame) quit();   }   	protected void doChatter(String who, String s) {		/* String res = Reporter.loadExec("./scripts/chat.pl respond "+ who + " '" + escape(s) +"'"); TODO		if (res != null) {			if (res.length() > 1) {								chat(res);			}		}*/	}		protected void chat(String s) {		// TODO	}	/**	 *	 Main entry point.      */	static public void main(String[] args) {		if (args.length == 1) {			println("Maverick listening on "+args[0]);			int port = Integer.valueOf(args[0]);			try {			    ServerSocket serverSock = new ServerSocket(port, 5);			    while (true) {			    	Socket clientSock = serverSock.accept();			    	System.out.println("Accepted connection from " + 						   clientSock.getInetAddress() + ":" +						   clientSock.getPort());			    	BotServer b = new BotServer(clientSock);			    	b.send("HELLO FROM MAVERICK v0.1");					new Thread(b).start();			    }			} catch (IOException ex) {			    println("Server io error: " + ex);			    System.exit(-1);			}		} else {			System.out.println(USAGE);			System.exit(-2);		}	}	}