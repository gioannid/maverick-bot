/***************************************************************************   Copyright (c) 2000:         University of Alberta,         Deptartment of Computing Science         Computer Poker Research Group         See "Liscence.txt"***************************************************************************/package poker;/** * Useful Holdem Constants * * <P>Source Code: <A HREF="http://www.cs.ualberta.ca/~davidson/poker/src/poker/Holdem.java">Holdem.java</A><P> * * @author  Aaron Davidson * @version 1.0.0 */public class Holdem {	// stages of game	public final static int PREFLOP = 0;	public final static int FLOP = 1;	public final static int TURN = 2;	public final static int RIVER = 3;	public final static int SHOWDOWN = 4;		// misc	public final static int MAX_PLAYERS = 15;	public final static int MAX_RAISES  = 4;		// actions/*	public final static int BLIND = 3;	public final static int SMALL_BLIND = 3;	public final static int BIG_BLIND = 4;	public final static int FOLD = 0;	public final static int CHECK = 0;	public final static int CALL = 1;	public final static int BET = 2;	public final static int RAISE = 2;*/	public final static int UNKNOWN 					= -1;	public final static int FOLD 						= 0;	public final static int CHECK 						= 1;	public final static int CALL 						= 2;	public final static int BET 						= 3;	public final static int RAISE 						= 3;	public final static int BLIND 						= 4;	public final static int SMALL_BLIND 				= 4;	public final static int BIG_BLIND 					= 5;		private final static String[] ACTIONS = {"UNKNOWN", "FOLD", "CHECK", "CALL", "BET/RAISE", "SMALL BLIND", "BIG BLIND"};		private static final Holdem FOLD_ACTION	= new Holdem (FOLD, 0);	private static final Holdem CHECK_ACTION= new Holdem (CHECK, 0);		public int action;	public double amount;		public static Holdem foldAction () {		return FOLD_ACTION;	}	public static Holdem checkAction () {		return CHECK_ACTION;	}	public static Holdem callAction (double am) {		return new Holdem (CALL, am);	}	public static Holdem betOrRaiseAction (double am) {		return new Holdem (RAISE, am);	}			@SuppressWarnings("unused")	private Holdem () {		// parameterless construction not permitted	}		public Holdem (int act, double am) {		action = act;		amount = am;	}	public boolean isCheckOrCall() {		return ((action == CHECK) || (action == CALL));	}		@Override	public String toString () {		if (amount != 0) {			return ACTIONS[action+1] + " " + amount;		} else {			return ACTIONS[action+1];		}	}}