/*This file is part of Fell Omen.

Fell Omen is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

Fell Omen is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see <http://www.gnu.org/licenses/>.*/

package poker;

import poker.ai.HandPotential;

import com.ibot.FellOmen_2_Impl;

/** 
 * Ian Bot
 * 
 * Description: {Insert Description here}
 * 
 * @author Ian Fellows
 */
public class FellOmen_2
{
   private int ourSeat;       // our seat for the current hand
   private Card c1, c2;       // our hole cards
   private GameInfo gameInfo;       // general game information
   private int preFlopHistory;
   private int flopHistory;
   private int turnHistory;
   private double flopHR;
   private double flopPOT;
   private double flopNPOT;
   private double turnHR;
   private double turnPOT;
   private double turnNPOT;
   private double riverHR;
   private int flopBDindex;

   private FellOmen_2_Impl ibot;   // The overridding action generator

   public FellOmen_2() 
   { 
   	ibot = new FellOmen_2_Impl();
   }  
   
   /**
    * An event called to tell us our hole cards and seat number
    * @param c1 your first hole card
    * @param c2 your second hole card
    * @param seat your seat number at the table
    */
   public void holeCards(Card c1, Card c2, int seat) {
      this.c1 = c1;
      this.c2 = c2;
      this.ourSeat = seat;

   }

   /**
    * Requests an Action from the player
    * Called when it is the Player's turn to act.
    */
   public Holdem getAction() {
     
      int stage = gameInfo.getStage();

      if (stage == Holdem.PREFLOP) {
         return preFlopAction();
      }
	  else if(stage == Holdem.FLOP)
		 return flopAction();
	  else if(stage == Holdem.TURN)
		 return turnAction();
	  else  
	  {
         return riverAction();
      }
   }
   
   /**
    * @return true if debug mode is on.
    */
   public boolean getDebug() {
      return true;
   }
   
   /**
    * print a debug statement.
    */
   public void debug(String str) {
      if (getDebug()) {
         System.out.println(str);   
      }
   }
   
   /**
    * print a debug statement with no end of line character
    */
   public void debugb(String str) {
      if (getDebug()) {
         System.out.print(str);  
      }  
   }

   /**
    * A new betting round has started.
    */ 
   public void stageEvent() 
   {
	   if (ourSeat >= 0) {
	    int st = gameInfo.getStage();
		if(st == Holdem.FLOP)
		{
			debug("board: " + gameInfo.getBoard().toString());
			HandEvaluator 	he = new HandEvaluator();
			HandPotential   pot = new HandPotential();
			flopHR = he.handRank(c1.toString() , c2.toString() , gameInfo.getBoard().toString() );
			flopPOT = pot.ppot_raw(c1.toString() , c2.toString() , gameInfo.getBoard().toString() , true);
			flopNPOT = pot.getLastNPot();
			flopBDindex = ibot.getFlopBoardIndex(gameInfo.getBoard().toString());
			debug("flop board index = "+flopBDindex);
			debug("flop Hand Strength : " + flopHR + " flop potential: " + flopPOT + " flop negative potential : " + flopNPOT);
		}
		else if(st == Holdem.TURN)
		{
			debug("board: " + gameInfo.getBoard().toString());
			HandEvaluator 	he = new HandEvaluator();
			HandPotential   pot = new HandPotential();
			turnHR = he.handRank(c1.toString() , c2.toString() , gameInfo.getBoard().toString() );
			turnPOT = pot.ppot_raw(c1.toString() , c2.toString() , gameInfo.getBoard().toString() , true);
			turnNPOT = pot.getLastNPot();
			debug("turn Hand Strength : " + turnHR + " turn potential: " + turnPOT + " turn negative potential : " + turnNPOT);			
		}
		else if(st == Holdem.RIVER)
		{
			debug("board: " + gameInfo.getBoard().toString());
			HandEvaluator 	he = new HandEvaluator();
			riverHR = he.handRank(c1.toString() , c2.toString() , gameInfo.getBoard().toString() );
			debug("river Hand Strength : " + riverHR);
		}
	   }
   }

   /**
    * A showdown has occurred.
    * @param pos the position of the player showing
    * @param c1 the first hole card shown
    * @param c2 the second hole card shown
    */
   public void showdownEvent(int seat, Card c1, Card c2) {}

   /**
    * A new game has been started.
    * @param gameInfo the game stat information
    */
   public void gameStartEvent(GameInfo gInfo) {
      gameInfo = gInfo;
	  
		//clean out our internal data
		this.preFlopHistory=-1;
		this.flopHistory=-1;
		this.turnHistory=-1;
		
		this.flopHR=-1;
		this.flopPOT=-1;
		this.flopNPOT=-1;
		this.turnHR=-1;
		this.turnPOT=-1;
		this.turnNPOT=-1;
		this.turnHR=-1;
		this.flopBDindex=-1;
   }
   
   /**
    * An action has been observed. 
    */
   public void actionEvent(int pos, Holdem act) 
   {
		int node = get_action_node(gameInfo);
		int st = gameInfo.getStage();
		
		//if the end of a round is detected, we record the play history of
		//the round.
		if ((act.isCheck() || (act.callAmount() != Holdem.NO_SUCH_ACTION)))
		{
		int terminalIndex = nodeToTerminalNodeIndex(node);
		debug("call action observed: " + act.toString());
		debug("position of action : " + pos);
		debug("node of action: " + node + " Terminal Index : " + terminalIndex);
		if(st == Holdem.PREFLOP)
			this.preFlopHistory=terminalIndex;
		else if(st == Holdem.FLOP)
			this.flopHistory=terminalIndex;
		else if(st == Holdem.TURN)
			this.turnHistory=terminalIndex;
		}
		else
			debug("action observed: " + act.toString());
   }
   
   /**
    * The game info state has been updated
    * Called after an action event has been fully processed
    */
   public void gameStateChanged() {}  

   /**
    * The hand is now over. 
    */
   public void gameOverEvent() 
   {


   }

   /**
    * A player at pos has won amount with the hand handName
    */
   public void winEvent(int pos, double amount, String handName) {}
   
   
   /**
    * Decide what to do for a pre-flop action
    *
    * Uses a really simple hand selection, as a silly example.
    */
   private Holdem preFlopAction() 
   {
   	  return (ibot.preFlopAction(gameInfo, c1, c2, ourSeat));
   }  
   private Holdem flopAction() 
   {
   	  return (ibot.flopAction(gameInfo, flopHR, flopPOT, flopNPOT,flopBDindex, ourSeat, preFlopHistory));
   }      
   private Holdem turnAction() 
   {
   	  return (ibot.turnAction(gameInfo, turnHR, turnPOT, turnNPOT,flopBDindex, ourSeat, preFlopHistory, flopHistory));
   }  
   private Holdem riverAction() 
   {
   	  return (ibot.riverAction(gameInfo, riverHR,flopBDindex, ourSeat, preFlopHistory, flopHistory, turnHistory));
   }  



   
   protected int get_action_node(GameInfo gi)
   {
		return(ibot.get_action_node(gi));
   }
   
   public int nodeToTerminalNodeIndex(int node)
   {
		if(node==1)
			return 0;
		else if (node==2)
			return 1;
		else if (node==3)
			return 2;
		else if (node==4)
			return 3;
		else if (node==6)
			return 4;
		else if (node==7)
			return 5;
		else if (node==8)
			return 6;
		else if (node==9)
			return 7;
		else if (node==10)
			return 8;
		else
			return 8;
   }
   
	public void newGame(GameInfo gInfo, Card c1, Card c2, int ID) {
		this.c1 = c1;
		this.c2 = c2;
		this.ourSeat = ID;
		gameStartEvent (gInfo);
		debug(gameInfo.getPlayerName(ID) +": Your Hole Cards Are: " + c1.toString() + " " + c2.toString());
	}
   
}